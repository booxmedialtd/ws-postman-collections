{
	"info": {
		"_postman_id": "e7d57228-fe57-4f5a-b1fe-0d19d4e0a2a9",
		"name": "Channel_V4",
		"description": "The Metadata API returns metadata related to the video content provided by the SmartVideo APIs.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API Spec",
			"item": [
				{
					"name": "Get an index of channels.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "200",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/channels?page[number]={{page}}&language={{language}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channels"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "{{page}}",
									"description": "Page number if the results have more items than items per page. Default = 1."
								},
								{
									"key": "language",
									"value": "{{language}}",
									"description": "The PK of the language to use, which will be a 3 character ISO 639-2 string (e.g.: fin). If this is omitted the system defined default will be used. If the requested language is not available then the system will return translations in order of the system defined preferences"
								}
							]
						},
						"description": "* We do not support including related resources in the index view.\n* **Available since:** 2020-11 (BPLAT-14148)\n"
					},
					"response": [
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels?page[number]={{page}}&language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "{{page}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"attributes\": {\n    \"channel_domains\": [\n     \"foo\",\n     \"bar\"\n    ],\n    \"channel_number\": {\n     \"type\": \"integer\",\n     \"example\": 1\n    },\n    \"description\": \"Lozente\",\n    \"dvb_info\": [\n     {\n      \"onid\": 123,\n      \"quality\": \"SD\",\n      \"sid\": 4324,\n      \"tsid\": 123,\n      \"type\": \"C\"\n     },\n     {\n      \"onid\": 123,\n      \"quality\": \"UHD\",\n      \"sid\": 4324,\n      \"tsid\": 123,\n      \"type\": \"C\"\n     }\n    ],\n    \"enabled_services\": [\n     {\n      \"pause\": false,\n      \"startover\": false,\n      \"trickplay\": false,\n      \"type\": \"Live\"\n     },\n     {\n      \"pause\": false,\n      \"startover\": false,\n      \"trickplay\": false,\n      \"type\": \"Live\"\n     }\n    ],\n    \"images\": [\n     {\n      \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n      \"height_pixels\": 200,\n      \"image_type\": \"Thumbnail\",\n      \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\",\n      \"width_pixels\": 320,\n      \"iso_639-2_lang\": \"fin\"\n     },\n     {\n      \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n      \"height_pixels\": 200,\n      \"image_type\": \"Thumbnail\",\n      \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\",\n      \"width_pixels\": 320,\n      \"iso_639-2_lang\": \"fin\"\n     }\n    ],\n    \"media_type\": \"video\",\n    \"name\": \"Yle\",\n    \"metadata_provider_information\": [\n     {\n      \"external_id\": \"tempor adipis\",\n      \"provider\": \"ERICSSON\"\n     },\n     {\n      \"external_id\": \"nulla\",\n      \"provider\": \"ERICSSON\"\n     }\n    ]\n   },\n   \"id\": \"e022f021-11f5-4cd6-89f2-02535d89eed6\",\n   \"relationships\": {\n    \"stream\": {\n     \"data\": {}\n    }\n   },\n   \"type\": \"Channel\"\n  },\n  {\n   \"attributes\": {\n    \"channel_domains\": [\n     \"foo\",\n     \"bar\"\n    ],\n    \"channel_number\": {\n     \"type\": \"integer\",\n     \"example\": 1\n    },\n    \"description\": \"Lozente\",\n    \"dvb_info\": [\n     {\n      \"onid\": 123,\n      \"quality\": \"SD\",\n      \"sid\": 4324,\n      \"tsid\": 123,\n      \"type\": \"T\"\n     },\n     {\n      \"onid\": 123,\n      \"quality\": \"HD\",\n      \"sid\": 4324,\n      \"tsid\": 123,\n      \"type\": \"C\"\n     }\n    ],\n    \"enabled_services\": [\n     {\n      \"pause\": false,\n      \"startover\": false,\n      \"trickplay\": false,\n      \"type\": \"Live\"\n     },\n     {\n      \"pause\": false,\n      \"startover\": false,\n      \"trickplay\": false,\n      \"type\": \"Live\"\n     }\n    ],\n    \"images\": [\n     {\n      \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n      \"height_pixels\": 200,\n      \"image_type\": \"Thumbnail\",\n      \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\",\n      \"width_pixels\": 320,\n      \"iso_639-2_lang\": \"fin\"\n     },\n     {\n      \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n      \"height_pixels\": 200,\n      \"image_type\": \"Thumbnail\",\n      \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\",\n      \"width_pixels\": 320,\n      \"iso_639-2_lang\": \"fin\"\n     }\n    ],\n    \"media_type\": \"audio\",\n    \"name\": \"Yle\",\n    \"metadata_provider_information\": [\n     {\n      \"external_id\": \"culpa amet commodo\",\n      \"provider\": \"ERICSSON\"\n     },\n     {\n      \"external_id\": \"voluptate id minim non eu\",\n      \"provider\": \"ERICSSON\"\n     }\n    ]\n   },\n   \"id\": \"e022f021-11f5-4cd6-89f2-02535d89eed6\",\n   \"relationships\": {\n    \"stream\": {\n     \"data\": {}\n    }\n   },\n   \"type\": \"Channel\"\n  }\n ]\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels?page[number]={{page}}&language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "{{page}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n \"errors\": [\n  {\n   \"code\": \"amet aliqua culpa\",\n   \"details\": \"\",\n   \"id\": \"Excepteur\",\n   \"status\": \"nostrud adipisicing pariatur\",\n   \"title\": \"enim aliquip magna\"\n  },\n  {\n   \"code\": \"commodo\",\n   \"details\": \"laboris qui deserunt incididunt officia\",\n   \"id\": \"aliqua deserunt adipisicing incididunt aute\",\n   \"status\": \"sit\",\n   \"title\": \"ex culpa\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Get a specific channel.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "200",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channels",
								":channel_id"
							],
							"query": [
								{
									"key": "language",
									"value": "{{language}}",
									"description": "The PK of the language to use, which will be a 3 character ISO 639-2 string (e.g.: fin). If this is omitted the system defined default will be used. If the requested language is not available then the system will return translations in order of the system defined preferences"
								}
							],
							"variable": [
								{
									"key": "channel_id",
									"value": "{{channelId}}",
									"type": "string",
									"description": "(Required) The identifier of the channel."
								}
							]
						},
						"description": "* **Available since:** 2020-11 (BPLAT-14149)\n"
					},
					"response": [
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels",
										":channel_id"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									],
									"variable": [
										{
											"key": "channel_id",
											"value": "{{channelId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"id\": \"42\",\n    \"type\": \"Channel\",\n    \"attributes\": {\n      \"name\": \"Yle\",\n      \"description\": \"Lozente\",\n      \"images\": [\n        {\n          \"image_type\": \"Thumbnail\",\n          \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n          \"width_pixels\": 320,\n          \"height_pixels\": 200,\n          \"iso_639-2_lang\": \"fin\",\n          \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\"\n        }\n      ],\n      \"channel_number\": {\n        \"default\": 1\n      },\n      \"media_type\": \"video|audio\",\n      \"enabled_services\": [\n        {\n          \"type\": \"Live\",\n          \"startover\": false,\n          \"pause\": false,\n          \"trickplay\": false\n        },\n        {\n          \"type\": \"nPVR\",\n          \"watch_ongoing\": true,\n          \"trickplay\": true\n        },\n        {\n          \"type\": \"CatchUp\",\n          \"trickplay\": false\n        }\n      ],\n      \"channel_domains\": [\n        \"foo\",\n        \"bar\"\n      ],\n      \"dvb_info\": [\n        {\n          \"type\": \"C|T|T2\",\n          \"onid\": 123,\n          \"tsid\": 123,\n          \"sid\": 4324,\n          \"quality\": \"SD|HD|UHD\"\n        }\n      ],\n      \"metadata_provider_information\": [\n        {\n          \"provider\": \"ERICSSON\",\n          \"external_id\": \"724693092\"\n        }\n      ]\n    }\n  }\n}"
						},
						{
							"name": "Error response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels",
										":channel_id"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									],
									"variable": [
										{
											"key": "channel_id",
											"value": "{{channelId}}"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"id\": \"6de7da3e-8877-4f2b-a670-16e18e5d79a0\",\n      \"status\": \"400\",\n      \"code\": \"10100\",\n      \"title\": \"Bad Request\",\n      \"details\": \"language must be a 3 character ISO 639-2 string\"\n    }\n  ]\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels",
										":channel_id"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									],
									"variable": [
										{
											"key": "channel_id",
											"value": "{{channelId}}"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"id\": \"6de7da3e-8877-4f2b-a670-16e18e5d79a0\",\n      \"status\": \"404\",\n      \"code\": \"30301\",\n      \"title\": \"Not found\",\n      \"details\": \"Channel ID 1234 not found\"\n    }\n  ]\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "UseCase",
			"item": [
				{
					"name": "List channels successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19e50c4f-2835-46f7-9645-4a171f41a270",
								"exec": [
									"pm.test(\"Response should be 200\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "200",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/channels?page[number]={{page}}&language={{language}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channels"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "{{page}}",
									"description": "Page number if the results have more items than items per page. Default = 1."
								},
								{
									"key": "language",
									"value": "{{language}}",
									"description": "The PK of the language to use, which will be a 3 character ISO 639-2 string (e.g.: fin). If this is omitted the system defined default will be used. If the requested language is not available then the system will return translations in order of the system defined preferences"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels?page[number]={{page}}&language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "{{page}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"id\": \"6de7da3e-8877-4f2b-a670-16e18e5d79a0\",\n      \"status\": \"400\",\n      \"code\": \"10100\",\n      \"title\": \"Bad Request\",\n      \"detail\": \"language must be a 3 character ISO 639-2 string\"\n    }\n  ]\n}"
						},
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels?page[number]={{page}}&language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "{{page}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"42\",\n      \"type\": \"Channel\",\n      \"attributes\": {\n        \"name\": \"Yle\",\n        \"description\": \"Lozente\",\n        \"images\": [\n          {\n            \"image_type\": \"Thumbnail\",\n            \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n            \"width_pixels\": 320,\n            \"height_pixels\": 200,\n            \"iso_639-2_lang\": \"fin\",\n            \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\"\n          }\n        ],\n        \"channel_number\": {\n          \"default\": 1\n        },\n        \"media_type\": \"video|audio\",\n        \"enabled_services\": [\n          {\n            \"type\": \"Live\",\n            \"startover\": false,\n            \"pause\": false,\n            \"trickplay\": false\n          },\n          {\n            \"type\": \"nPVR\",\n            \"watch_ongoing\": true,\n            \"trickplay\": true\n          },\n          {\n            \"type\": \"CatchUp\",\n            \"trickplay\": false\n          }\n        ],\n        \"channel_domains\": [\n          \"foo\",\n          \"bar\"\n        ],\n        \"dvb_info\": [\n          {\n            \"type\": \"C|T|T2\",\n            \"onid\": 123,\n            \"tsid\": 123,\n            \"sid\": 4324,\n            \"quality\": \"SD|HD|UHD\"\n          }\n        ],\n        \"metadata_provider_information\": [\n          {\n            \"provider\": \"ERICSSON\",\n            \"external_id\": \"724693092\"\n          }\n        ]\n      }\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "List channels un-successfully with bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "acafa216-cbd0-4aaf-9058-0a59e53d561c",
								"exec": [
									"pm.test(\"Response should be 400\", () => {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "400",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/channels?page[number]={{page}}&language={{language}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channels"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "{{page}}",
									"description": "Page number if the results have more items than items per page. Default = 1."
								},
								{
									"key": "language",
									"value": "{{language}}",
									"description": "The PK of the language to use, which will be a 3 character ISO 639-2 string (e.g.: fin). If this is omitted the system defined default will be used. If the requested language is not available then the system will return translations in order of the system defined preferences"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels?page[number]={{page}}&language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "{{page}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"id\": \"6de7da3e-8877-4f2b-a670-16e18e5d79a0\",\n      \"status\": \"400\",\n      \"code\": \"10100\",\n      \"title\": \"Bad Request\",\n      \"details\": \"language must be a 3 character ISO 639-2 string\"\n    }\n  ]\n}"
						},
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels?page[number]={{page}}&language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "{{page}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"42\",\n      \"type\": \"Channel\",\n      \"attributes\": {\n        \"name\": \"Yle\",\n        \"description\": \"Lozente\",\n        \"images\": [\n          {\n            \"image_type\": \"Thumbnail\",\n            \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n            \"width_pixels\": 320,\n            \"height_pixels\": 200,\n            \"iso_639-2_lang\": \"fin\",\n            \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\"\n          }\n        ],\n        \"channel_number\": {\n          \"default\": 1\n        },\n        \"media_type\": \"video|audio\",\n        \"enabled_services\": [\n          {\n            \"type\": \"Live\",\n            \"startover\": false,\n            \"pause\": false,\n            \"trickplay\": false\n          },\n          {\n            \"type\": \"nPVR\",\n            \"watch_ongoing\": true,\n            \"trickplay\": true\n          },\n          {\n            \"type\": \"CatchUp\",\n            \"trickplay\": false\n          }\n        ],\n        \"channel_domains\": [\n          \"foo\",\n          \"bar\"\n        ],\n        \"dvb_info\": [\n          {\n            \"type\": \"C|T|T2\",\n            \"onid\": 123,\n            \"tsid\": 123,\n            \"sid\": 4324,\n            \"quality\": \"SD|HD|UHD\"\n          }\n        ],\n        \"metadata_provider_information\": [\n          {\n            \"provider\": \"ERICSSON\",\n            \"external_id\": \"724693092\"\n          }\n        ]\n      }\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "List channel successfully with out page and language",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "200",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/channels?page[number]={{empty}}&language={{empty}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channels"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "{{empty}}",
									"description": "Page number if the results have more items than items per page. Default = 1."
								},
								{
									"key": "language",
									"value": "{{empty}}",
									"description": "The PK of the language to use, which will be a 3 character ISO 639-2 string (e.g.: fin). If this is omitted the system defined default will be used. If the requested language is not available then the system will return translations in order of the system defined preferences"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels?page[number]={{page}}&language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "{{page}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n \"errors\": [\n  {\n   \"code\": \"amet aliqua culpa\",\n   \"details\": \"\",\n   \"id\": \"Excepteur\",\n   \"status\": \"nostrud adipisicing pariatur\",\n   \"title\": \"enim aliquip magna\"\n  },\n  {\n   \"code\": \"commodo\",\n   \"details\": \"laboris qui deserunt incididunt officia\",\n   \"id\": \"aliqua deserunt adipisicing incididunt aute\",\n   \"status\": \"sit\",\n   \"title\": \"ex culpa\"\n  }\n ]\n}"
						},
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels?page[number]={{page}}&language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "{{page}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"attributes\": {\n    \"channel_domains\": [\n     \"foo\",\n     \"bar\"\n    ],\n    \"channel_number\": {\n     \"type\": \"integer\",\n     \"example\": 1\n    },\n    \"description\": \"Lozente\",\n    \"dvb_info\": [\n     {\n      \"onid\": 123,\n      \"quality\": \"SD\",\n      \"sid\": 4324,\n      \"tsid\": 123,\n      \"type\": \"C\"\n     },\n     {\n      \"onid\": 123,\n      \"quality\": \"UHD\",\n      \"sid\": 4324,\n      \"tsid\": 123,\n      \"type\": \"C\"\n     }\n    ],\n    \"enabled_services\": [\n     {\n      \"pause\": false,\n      \"startover\": false,\n      \"trickplay\": false,\n      \"type\": \"Live\"\n     },\n     {\n      \"pause\": false,\n      \"startover\": false,\n      \"trickplay\": false,\n      \"type\": \"Live\"\n     }\n    ],\n    \"images\": [\n     {\n      \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n      \"height_pixels\": 200,\n      \"image_type\": \"Thumbnail\",\n      \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\",\n      \"width_pixels\": 320,\n      \"iso_639-2_lang\": \"fin\"\n     },\n     {\n      \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n      \"height_pixels\": 200,\n      \"image_type\": \"Thumbnail\",\n      \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\",\n      \"width_pixels\": 320,\n      \"iso_639-2_lang\": \"fin\"\n     }\n    ],\n    \"media_type\": \"video\",\n    \"name\": \"Yle\",\n    \"metadata_provider_information\": [\n     {\n      \"external_id\": \"tempor adipis\",\n      \"provider\": \"ERICSSON\"\n     },\n     {\n      \"external_id\": \"nulla\",\n      \"provider\": \"ERICSSON\"\n     }\n    ]\n   },\n   \"id\": \"e022f021-11f5-4cd6-89f2-02535d89eed6\",\n   \"relationships\": {\n    \"stream\": {\n     \"data\": {}\n    }\n   },\n   \"type\": \"Channel\"\n  },\n  {\n   \"attributes\": {\n    \"channel_domains\": [\n     \"foo\",\n     \"bar\"\n    ],\n    \"channel_number\": {\n     \"type\": \"integer\",\n     \"example\": 1\n    },\n    \"description\": \"Lozente\",\n    \"dvb_info\": [\n     {\n      \"onid\": 123,\n      \"quality\": \"SD\",\n      \"sid\": 4324,\n      \"tsid\": 123,\n      \"type\": \"T\"\n     },\n     {\n      \"onid\": 123,\n      \"quality\": \"HD\",\n      \"sid\": 4324,\n      \"tsid\": 123,\n      \"type\": \"C\"\n     }\n    ],\n    \"enabled_services\": [\n     {\n      \"pause\": false,\n      \"startover\": false,\n      \"trickplay\": false,\n      \"type\": \"Live\"\n     },\n     {\n      \"pause\": false,\n      \"startover\": false,\n      \"trickplay\": false,\n      \"type\": \"Live\"\n     }\n    ],\n    \"images\": [\n     {\n      \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n      \"height_pixels\": 200,\n      \"image_type\": \"Thumbnail\",\n      \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\",\n      \"width_pixels\": 320,\n      \"iso_639-2_lang\": \"fin\"\n     },\n     {\n      \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n      \"height_pixels\": 200,\n      \"image_type\": \"Thumbnail\",\n      \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\",\n      \"width_pixels\": 320,\n      \"iso_639-2_lang\": \"fin\"\n     }\n    ],\n    \"media_type\": \"audio\",\n    \"name\": \"Yle\",\n    \"metadata_provider_information\": [\n     {\n      \"external_id\": \"culpa amet commodo\",\n      \"provider\": \"ERICSSON\"\n     },\n     {\n      \"external_id\": \"voluptate id minim non eu\",\n      \"provider\": \"ERICSSON\"\n     }\n    ]\n   },\n   \"id\": \"e022f021-11f5-4cd6-89f2-02535d89eed6\",\n   \"relationships\": {\n    \"stream\": {\n     \"data\": {}\n    }\n   },\n   \"type\": \"Channel\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Get a specific channel successfully ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba6962a6-9b93-4edc-875f-fd05f3cd08ca",
								"exec": [
									"pm.test(\"Response should be 200\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "200",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channels",
								":channel_id"
							],
							"query": [
								{
									"key": "language",
									"value": "{{language}}",
									"description": "The PK of the language to use, which will be a 3 character ISO 639-2 string (e.g.: fin). If this is omitted the system defined default will be used. If the requested language is not available then the system will return translations in order of the system defined preferences"
								}
							],
							"variable": [
								{
									"key": "channel_id",
									"value": "{{channelId}}",
									"type": "string",
									"description": "(Required) The identifier of the channel."
								}
							]
						}
					},
					"response": [
						{
							"name": "Error response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels",
										":channel_id"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									],
									"variable": [
										{
											"key": "channel_id",
											"value": ""
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"id\": \"6de7da3e-8877-4f2b-a670-16e18e5d79a0\",\n      \"status\": \"400\",\n      \"code\": \"10100\",\n      \"title\": \"Bad Request\",\n      \"detail\": \"language must be a 3 character ISO 639-2 string\"\n    }\n  ]\n}"
						},
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels",
										":channel_id"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									],
									"variable": [
										{
											"key": "channel_id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"id\": \"42\",\n    \"type\": \"Channel\",\n    \"attributes\": {\n      \"name\": \"Yle\",\n      \"description\": \"Lozente\",\n      \"images\": [\n        {\n          \"image_type\": \"Thumbnail\",\n          \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n          \"width_pixels\": 320,\n          \"height_pixels\": 200,\n          \"iso_639-2_lang\": \"fin\",\n          \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\"\n        }\n      ],\n      \"channel_number\": {\n        \"default\": 1\n      },\n      \"media_type\": \"video|audio\",\n      \"enabled_services\": [\n        {\n          \"type\": \"Live\",\n          \"startover\": false,\n          \"pause\": false,\n          \"trickplay\": false\n        },\n        {\n          \"type\": \"nPVR\",\n          \"watch_ongoing\": true,\n          \"trickplay\": true\n        },\n        {\n          \"type\": \"CatchUp\",\n          \"trickplay\": false\n        }\n      ],\n      \"channel_domains\": [\n        \"foo\",\n        \"bar\"\n      ],\n      \"dvb_info\": [\n        {\n          \"type\": \"C|T|T2\",\n          \"onid\": 123,\n          \"tsid\": 123,\n          \"sid\": 4324,\n          \"quality\": \"SD|HD|UHD\"\n        }\n      ],\n      \"metadata_provider_information\": [\n        {\n          \"provider\": \"ERICSSON\",\n          \"external_id\": \"724693092\"\n        }\n      ]\n    }\n  }\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels",
										":channel_id"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									],
									"variable": [
										{
											"key": "channel_id",
											"value": ""
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"id\": \"6de7da3e-8877-4f2b-a670-16e18e5d79a0\",\n      \"status\": \"404\",\n      \"code\": \"30301\",\n      \"title\": \"Not found\",\n      \"detail\": \"Channel ID 1234 not found\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Get a specific channel un-successfully with bad request ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22652866-6135-4201-acf7-9c2487602025",
								"exec": [
									"pm.test(\"Response should be 400\", () => {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "400",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channels",
								":channel_id"
							],
							"query": [
								{
									"key": "language",
									"value": "{{language}}",
									"description": "The PK of the language to use, which will be a 3 character ISO 639-2 string (e.g.: fin). If this is omitted the system defined default will be used. If the requested language is not available then the system will return translations in order of the system defined preferences"
								}
							],
							"variable": [
								{
									"key": "channel_id",
									"value": "{{channelId}}",
									"type": "string",
									"description": "(Required) The identifier of the channel."
								}
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels",
										":channel_id"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									],
									"variable": [
										{
											"key": "channel_id",
											"value": ""
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"id\": \"6de7da3e-8877-4f2b-a670-16e18e5d79a0\",\n      \"status\": \"404\",\n      \"code\": \"30301\",\n      \"title\": \"Not found\",\n      \"detail\": \"Channel ID 1234 not found\"\n    }\n  ]\n}"
						},
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels",
										":channel_id"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									],
									"variable": [
										{
											"key": "channel_id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"id\": \"42\",\n    \"type\": \"Channel\",\n    \"attributes\": {\n      \"name\": \"Yle\",\n      \"description\": \"Lozente\",\n      \"images\": [\n        {\n          \"image_type\": \"Thumbnail\",\n          \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n          \"width_pixels\": 320,\n          \"height_pixels\": 200,\n          \"iso_639-2_lang\": \"fin\",\n          \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\"\n        }\n      ],\n      \"channel_number\": {\n        \"default\": 1\n      },\n      \"media_type\": \"video|audio\",\n      \"enabled_services\": [\n        {\n          \"type\": \"Live\",\n          \"startover\": false,\n          \"pause\": false,\n          \"trickplay\": false\n        },\n        {\n          \"type\": \"nPVR\",\n          \"watch_ongoing\": true,\n          \"trickplay\": true\n        },\n        {\n          \"type\": \"CatchUp\",\n          \"trickplay\": false\n        }\n      ],\n      \"channel_domains\": [\n        \"foo\",\n        \"bar\"\n      ],\n      \"dvb_info\": [\n        {\n          \"type\": \"C|T|T2\",\n          \"onid\": 123,\n          \"tsid\": 123,\n          \"sid\": 4324,\n          \"quality\": \"SD|HD|UHD\"\n        }\n      ],\n      \"metadata_provider_information\": [\n        {\n          \"provider\": \"ERICSSON\",\n          \"external_id\": \"724693092\"\n        }\n      ]\n    }\n  }\n}"
						},
						{
							"name": "Error response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels",
										":channel_id"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									],
									"variable": [
										{
											"key": "channel_id",
											"value": ""
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"id\": \"6de7da3e-8877-4f2b-a670-16e18e5d79a0\",\n      \"status\": \"400\",\n      \"code\": \"10100\",\n      \"title\": \"Bad Request\",\n      \"detail\": \"language must be a 3 character ISO 639-2 string\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Specified channel isn't found ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbbcc7d6-cb26-4fc4-a67c-e374bf261717",
								"exec": [
									"pm.test(\"Response should be 404\", () => {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.be.not.empty;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "404",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"channels",
								":channel_id"
							],
							"query": [
								{
									"key": "language",
									"value": "{{language}}",
									"description": "The PK of the language to use, which will be a 3 character ISO 639-2 string (e.g.: fin). If this is omitted the system defined default will be used. If the requested language is not available then the system will return translations in order of the system defined preferences"
								}
							],
							"variable": [
								{
									"key": "channel_id",
									"value": "{{channelId}}",
									"type": "string",
									"description": "(Required) The identifier of the channel."
								}
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels",
										":channel_id"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									],
									"variable": [
										{
											"key": "channel_id",
											"value": "{{ChannelId}}"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n \"errors\": [\n  {\n   \"code\": \"amet aliqua culpa\",\n   \"details\": \"\",\n   \"id\": \"Excepteur\",\n   \"status\": \"nostrud adipisicing pariatur\",\n   \"title\": \"enim aliquip magna\"\n  },\n  {\n   \"code\": \"commodo\",\n   \"details\": \"laboris qui deserunt incididunt officia\",\n   \"id\": \"aliqua deserunt adipisicing incididunt aute\",\n   \"status\": \"sit\",\n   \"title\": \"ex culpa\"\n  }\n ]\n}"
						},
						{
							"name": "Error response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels",
										":channel_id"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									],
									"variable": [
										{
											"key": "channel_id",
											"value": ""
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n \"errors\": [\n  {\n   \"code\": \"amet aliqua culpa\",\n   \"details\": \"\",\n   \"id\": \"Excepteur\",\n   \"status\": \"nostrud adipisicing pariatur\",\n   \"title\": \"enim aliquip magna\"\n  },\n  {\n   \"code\": \"commodo\",\n   \"details\": \"laboris qui deserunt incididunt officia\",\n   \"id\": \"aliqua deserunt adipisicing incididunt aute\",\n   \"status\": \"sit\",\n   \"title\": \"ex culpa\"\n  }\n ]\n}"
						},
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/channels/:channel_id?language={{language}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"channels",
										":channel_id"
									],
									"query": [
										{
											"key": "language",
											"value": "{{language}}"
										}
									],
									"variable": [
										{
											"key": "channel_id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"id\": \"42\",\n    \"type\": \"Channel\",\n    \"attributes\": {\n      \"name\": \"Yle\",\n      \"description\": \"Lozente\",\n      \"images\": [\n        {\n          \"image_type\": \"Thumbnail\",\n          \"alternate_access_description\": \"Bruce Willis shooting a big gun at some bad guys, pew pew pew\",\n          \"width_pixels\": 320,\n          \"height_pixels\": 200,\n          \"iso_639-2_lang\": \"fin\",\n          \"url\": \"https://www.demo.com/assets/img/thumbnails/movies/diehard.png\"\n        }\n      ],\n      \"channel_number\": {\n        \"default\": 1\n      },\n      \"media_type\": \"video|audio\",\n      \"enabled_services\": [\n        {\n          \"type\": \"Live\",\n          \"startover\": false,\n          \"pause\": false,\n          \"trickplay\": false\n        },\n        {\n          \"type\": \"nPVR\",\n          \"watch_ongoing\": true,\n          \"trickplay\": true\n        },\n        {\n          \"type\": \"CatchUp\",\n          \"trickplay\": false\n        }\n      ],\n      \"channel_domains\": [\n        \"foo\",\n        \"bar\"\n      ],\n      \"dvb_info\": [\n        {\n          \"type\": \"C|T|T2\",\n          \"onid\": 123,\n          \"tsid\": 123,\n          \"sid\": 4324,\n          \"quality\": \"SD|HD|UHD\"\n        }\n      ],\n      \"metadata_provider_information\": [\n        {\n          \"provider\": \"ERICSSON\",\n          \"external_id\": \"724693092\"\n        }\n      ]\n    }\n  }\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0fdb6353-495b-489b-9b0b-ec88d486310a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9faab127-f73e-48de-96ad-55d051412a9a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "df31a3d3-dace-4630-955a-e110100b4afc",
			"key": "baseUrl",
			"value": "https://testing.booxmedia.xyz/api/metadata/v1"
		}
	],
	"protocolProfileBehavior": {}
}